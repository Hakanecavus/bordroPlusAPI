// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bP.Data.DBContext;

#nullable disable

namespace bordroPlus.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20231129112736_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("bP.Core.Models.CoreModels.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("createdByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("createdByPersonId")
                        .HasColumnType("int");

                    b.Property<int>("createdByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("hasBranch")
                        .HasColumnType("bit");

                    b.Property<string>("mersisNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("modifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("modifiedByPersonId")
                        .HasColumnType("int");

                    b.Property<int>("modifiedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("numberOfBranches")
                        .HasColumnType("int");

                    b.Property<string>("taxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("taxOffice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tradeRegisteryNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("workPlaceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("bP.Core.Models.CoreModels.CompanyBranch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("createdByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("createdByPersonId")
                        .HasColumnType("int");

                    b.Property<int>("createdByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("modifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("modifiedByPersonId")
                        .HasColumnType("int");

                    b.Property<int>("modifiedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("taxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("taxOffice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tradeRegisteryNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyBranches");
                });

            modelBuilder.Entity("bP.Core.Models.CoreModels.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("branch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("createdByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("createdByPersonId")
                        .HasColumnType("int");

                    b.Property<int>("createdByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dismissalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("duty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("legalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("modifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("modifiedByPersonId")
                        .HasColumnType("int");

                    b.Property<int>("modifiedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("onBoardingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("bP.Core.Models.CoreModels.JobDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("createdByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("createdByPersonId")
                        .HasColumnType("int");

                    b.Property<int>("createdByUserId")
                        .HasColumnType("int");

                    b.Property<string>("definition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("modifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("modifiedByPersonId")
                        .HasColumnType("int");

                    b.Property<int>("modifiedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("JobDefinitions");
                });

            modelBuilder.Entity("bP.Core.Models.CoreModels.Payroll", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<float>("BES")
                        .HasColumnType("real");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<float>("additionalRights")
                        .HasColumnType("real");

                    b.Property<float>("advancePayment")
                        .HasColumnType("real");

                    b.Property<float>("agi")
                        .HasColumnType("real");

                    b.Property<float>("bonus")
                        .HasColumnType("real");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("createdByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("createdByPersonId")
                        .HasColumnType("int");

                    b.Property<int>("createdByUserId")
                        .HasColumnType("int");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("dailyPayment")
                        .HasColumnType("real");

                    b.Property<float>("daysAtWork")
                        .HasColumnType("real");

                    b.Property<float>("daysOffWork")
                        .HasColumnType("real");

                    b.Property<float>("disablityDiscount")
                        .HasColumnType("real");

                    b.Property<float>("hourlyPayment")
                        .HasColumnType("real");

                    b.Property<float>("incomeTax")
                        .HasColumnType("real");

                    b.Property<float>("incomeTaxBase")
                        .HasColumnType("real");

                    b.Property<float>("incomeTaxException")
                        .HasColumnType("real");

                    b.Property<float>("incomeTaxWage")
                        .HasColumnType("real");

                    b.Property<float>("insuranceCut")
                        .HasColumnType("real");

                    b.Property<float>("levyPayment")
                        .HasColumnType("real");

                    b.Property<DateTime>("modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("modifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("modifiedByPersonId")
                        .HasColumnType("int");

                    b.Property<int>("modifiedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("netSalary")
                        .HasColumnType("real");

                    b.Property<float>("numberOfUnit")
                        .HasColumnType("real");

                    b.Property<float>("overTime")
                        .HasColumnType("real");

                    b.Property<float>("overTimeCoef")
                        .HasColumnType("real");

                    b.Property<DateTime>("paymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("payrollStatus")
                        .HasColumnType("int");

                    b.Property<int>("payrollType")
                        .HasColumnType("int");

                    b.Property<float>("salary")
                        .HasColumnType("real");

                    b.Property<float>("stampTax")
                        .HasColumnType("real");

                    b.Property<float>("stampTaxException")
                        .HasColumnType("real");

                    b.Property<float>("stampTaxWage")
                        .HasColumnType("real");

                    b.Property<float>("totalTaxes")
                        .HasColumnType("real");

                    b.Property<float>("totalWageCut")
                        .HasColumnType("real");

                    b.Property<float>("unemploymentInsurance")
                        .HasColumnType("real");

                    b.Property<float>("unitPayment")
                        .HasColumnType("real");

                    b.Property<float>("weeklyWorkHours")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Payrolls");
                });

            modelBuilder.Entity("bP.Core.Models.CoreModels.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("createdByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("createdByPersonId")
                        .HasColumnType("int");

                    b.Property<int>("createdByUserId")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("modifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("modifiedByPersonId")
                        .HasColumnType("int");

                    b.Property<int>("modifiedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("bP.Core.Models.CoreModels.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("createdByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("createdByPersonId")
                        .HasColumnType("int");

                    b.Property<int>("createdByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("modifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("modifiedByPersonId")
                        .HasColumnType("int");

                    b.Property<int>("modifiedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("bP.Core.Models.CoreModels.UploadFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("createdByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("createdByPersonId")
                        .HasColumnType("int");

                    b.Property<int>("createdByUserId")
                        .HasColumnType("int");

                    b.Property<string>("fileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("filePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("fileTypes")
                        .HasColumnType("int");

                    b.Property<DateTime>("modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("modifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("modifiedByPersonId")
                        .HasColumnType("int");

                    b.Property<int>("modifiedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("UploadFiles");
                });

            modelBuilder.Entity("bP.Core.Models.CoreModels.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("identityNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("passwordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("passwordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("bP.Core.Models.CoreModels.Vacation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("createdByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("createdByPersonId")
                        .HasColumnType("int");

                    b.Property<int>("createdByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("modifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("modifiedByPersonId")
                        .HasColumnType("int");

                    b.Property<int>("modifiedByUserId")
                        .HasColumnType("int");

                    b.Property<float>("numberOfDaysOffWork")
                        .HasColumnType("real");

                    b.Property<float>("numberOfHours")
                        .HasColumnType("real");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.Property<int>("vacationType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("Vacations");
                });

            modelBuilder.Entity("bP.Core.Models.CoreModels.CompanyBranch", b =>
                {
                    b.HasOne("bP.Core.Models.CoreModels.Company", null)
                        .WithMany("companyBranchSet")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("bP.Core.Models.CoreModels.JobDefinition", b =>
                {
                    b.HasOne("bP.Core.Models.CoreModels.Employee", null)
                        .WithMany("jobDefinition")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("bP.Core.Models.CoreModels.Payroll", b =>
                {
                    b.HasOne("bP.Core.Models.CoreModels.Employee", null)
                        .WithMany("payrolls")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("bP.Core.Models.CoreModels.Permission", b =>
                {
                    b.HasOne("bP.Core.Models.CoreModels.Role", null)
                        .WithMany("permissions")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("bP.Core.Models.CoreModels.Role", b =>
                {
                    b.HasOne("bP.Core.Models.CoreModels.User", null)
                        .WithMany("role")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("bP.Core.Models.CoreModels.UploadFile", b =>
                {
                    b.HasOne("bP.Core.Models.CoreModels.Employee", null)
                        .WithMany("uploadFileSet")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("bP.Core.Models.CoreModels.Vacation", b =>
                {
                    b.HasOne("bP.Core.Models.CoreModels.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("bP.Core.Models.CoreModels.Company", b =>
                {
                    b.Navigation("companyBranchSet");
                });

            modelBuilder.Entity("bP.Core.Models.CoreModels.Employee", b =>
                {
                    b.Navigation("jobDefinition");

                    b.Navigation("payrolls");

                    b.Navigation("uploadFileSet");
                });

            modelBuilder.Entity("bP.Core.Models.CoreModels.Role", b =>
                {
                    b.Navigation("permissions");
                });

            modelBuilder.Entity("bP.Core.Models.CoreModels.User", b =>
                {
                    b.Navigation("role");
                });
#pragma warning restore 612, 618
        }
    }
}
